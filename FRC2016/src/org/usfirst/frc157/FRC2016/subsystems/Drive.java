// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.FRC2016.subsystems;

import org.usfirst.frc157.FRC2016.RobotMap;
import org.usfirst.frc157.FRC2016.commands.*;

import com.ni.vision.NIVision.CalibrationThumbnailType;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftDriveA = RobotMap.driveLeftDriveA;
    private final CANTalon leftDriveB = RobotMap.driveLeftDriveB;
    private final CANTalon rightDriveA = RobotMap.driveRightDriveA;
    private final CANTalon rightDriveB = RobotMap.driveRightDriveB;
//    private final Encoder leftEncoder = RobotMap.driveLeftEncoder;
//    private final Encoder rightEncoder = RobotMap.driveRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new TeleopDrive());
   }
    
    public Drive()
    {
    	// Set Talon Modes
    	configureControllers();
    }
    
    public void setLeftDrive(double drive)
    {
    	leftDriveA.set(-drive);
    	SmartDashboard.putDouble("LeftDrive", drive);
    }

    public void setRightDrive(double drive)
    {
    	rightDriveA.set(drive);    	
    	SmartDashboard.putDouble("RighttDrive", drive);
    }
    
    private void configureControllers()
    {
    	leftDriveA.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	rightDriveA.changeControlMode(CANTalon.TalonControlMode.PercentVbus);

    	// Set the followers
    	leftDriveB.changeControlMode(CANTalon.TalonControlMode.Follower);
    	leftDriveB.set(leftDriveA.getDeviceID());
    	//leftDriveB.reverseOutput(false);
    	rightDriveB.changeControlMode(CANTalon.TalonControlMode.Follower);
    	rightDriveB.set(rightDriveA.getDeviceID());
    	//rightDriveB.reverseOutput(false);
    	
    	// TODO consider setting ramp rate
    }
    
    //TODO Motors must be wired so that Positive Power increases encoder count
}

