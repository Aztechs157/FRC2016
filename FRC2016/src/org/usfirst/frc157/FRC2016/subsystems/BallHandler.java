// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.FRC2016.subsystems;

import org.usfirst.frc157.FRC2016.InfraredRangeSensor;
import org.usfirst.frc157.FRC2016.RobotMap;
import org.usfirst.frc157.FRC2016.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class BallHandler extends Subsystem {

	private final static double ALL_STOP = 0; // %max
	private final static double SHOOTER_INTAKE_SPEED = -0.25;  // %max
	private final static double SHOOTER_SHOOT_SPEED = 0.75;  // %max
	private final static double INTAKE_RETRIEVAL_SPEED = 0.5; // %max
	
	// Note close range sensor minimum is 6 inches, max is 31 inches
	private final static double RANGE_MIN_IN_HOLDER = 8.0; // approximately inches
	private final static double RANGE_MAX_IN_HOLDER = 9.0; // approximately inches
	private final static double RANGE_MIN_TO_GRAB = 12.0; // approximately inches
	private final static double RANGE_MAX_TO_GRAB = 25.0; // approximately inches
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftShooter = RobotMap.ballHandlerLeftShooter;
    private final CANTalon rightShooter = RobotMap.ballHandlerRightShooter;
    private final CANTalon ballRetriever = RobotMap.ballHandlerBallRetriever;
//    private final AnalogInput ballRangefinder = RobotMap.ballHandlerBallRangefinder;
    private InfraredRangeSensor ballRangeFinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public BallHandler()
    {
    	System.out.println("BallHandler Constructor");
    	if(ballRangeFinder == null)
    	{
    		InfraredRangeSensor.CalibrationData calData = new InfraredRangeSensor.CalibrationData();
    		ballRangeFinder = new InfraredRangeSensor(RobotMap.BallIRRangefinderAnalogIn, calData);
    	}
    }
    
    public double getBoulderRange()
    {
    	return ballRangeFinder.getRange();
    }
    
    public void startIntake()
    {
    	leftShooter.set(SHOOTER_INTAKE_SPEED);
    	rightShooter.set(SHOOTER_INTAKE_SPEED);
    	ballRetriever.set(INTAKE_RETRIEVAL_SPEED);
    }
    
    public void startShoot()
    {
    	leftShooter.set(SHOOTER_SHOOT_SPEED);
    	rightShooter.set(SHOOTER_SHOOT_SPEED);
    }
    
    public void stopAll()
    {
    	leftShooter.set(ALL_STOP);
    	rightShooter.set(ALL_STOP);
    	ballRetriever.set(ALL_STOP);
    }
    
    public boolean isBallInHolder()
    {
    	double range = getBoulderRange();
    	return ((RANGE_MIN_IN_HOLDER <= range) && (range <= RANGE_MAX_IN_HOLDER));
    }
  
    public boolean isBallGrabable()
    {
    	double range = getBoulderRange();
//    	System.out.println(range + " " + RANGE_MIN_TO_GRAB + " " + RANGE_MAX_TO_GRAB );
    	return ((RANGE_MIN_TO_GRAB <= range) && (range <= RANGE_MAX_TO_GRAB));
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

