// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.FRC2016;

import org.usfirst.frc157.FRC2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc157.FRC2016.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton buttonAB1;
    public Joystick arcadeStick;
    public JoystickButton buttonTLB1;
    public Joystick leftTankStick;
    public JoystickButton buttonTRB1;
    public Joystick rightTankStick;
    public LogitechController pitController;
    public LogitechControllerButton buttonPCB1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        /////////////////////////////////////////////////////////////////
        rightTankStick = new Joystick(2);
        
        buttonTRB1 = new JoystickButton(rightTankStick, 1);
        buttonTRB1.whenPressed(new PrintButton("Right Tank Stick - Button 1"));
        
        /////////////////////////////////////////////////////////////////
        leftTankStick = new Joystick(1);
        
        buttonTLB1 = new JoystickButton(leftTankStick, 1);
        buttonTLB1.whenPressed(new PrintButton("Left Tank Stick - Button 1"));
        
        /////////////////////////////////////////////////////////////////
        arcadeStick = new Joystick(0);
        
        buttonAB1 = new JoystickButton(arcadeStick, 1);
        buttonAB1.whenPressed(new PrintButton("Arcade Stick - Button 1"));

        /////////////////////////////////////////////////////////////////
        pitController = new LogitechController(3);
        
        buttonPCB1 = new LogitechControllerButton(pitController, 1);
        buttonPCB1.whenPressed(new PrintButton("Pit Controller - Button 1"));
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("PrintButton", new PrintButton("SmartDashboard - PrintButton"));
        SmartDashboard.putData("TeleopDrive", new TeleopDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getArcadeStick() {
        return arcadeStick;
    }

    public Joystick getLeftTankStick() {
        return leftTankStick;
    }

    public Joystick getRightTankStick() {
        return rightTankStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

