// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.FRC2016;

import org.usfirst.frc157.FRC2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc157.FRC2016.subsystems.*;
import org.usfirst.frc157.FRC2016.subsystems.Arm.Position;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released  and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());
	public static final int LEFT_JOYSTICK_ID = 1;
	public static final int RIGHT_JOYSTICK_ID = 2;
	public static final int OPERATOR_JOYSTICK_ID = 3;
	public static final int LOGITECH_CONTROLLER_ID = 0;

	public static final boolean USE_OPERATOR_JOYSTICK = true;  //true = Joystick operator; false = Logitech operator  


	// -----------------------------------------//
	//    DECLARATIONS
	// -----------------------------------------//

	//============================================================================//
    // Left Driver Stick
	//============================================================================//
	public Joystick driverLeft;
	private JoystickButton driverRightButtonTrigger; // Button 1 - Trigger
	private JoystickButton driverRightButton2;       // Button 2 - Stick down
	private JoystickButton driverRightButton3;       // Button 3 - Stick center
	private JoystickButton driverRightButton4;       // Button 4 - Stick left
	private JoystickButton driverRightButton5;       // Button 5 - Stick right
	private JoystickButton driverRightButton6;       // Button 6 - Base Left Away
	private JoystickButton driverRightButton7;       // Button 7 - Base Left Close
	private JoystickButton driverRightButton8;       // Button 8 - Base Near Left
	private JoystickButton driverRightButton9;       // Button 9 - Base Near Right
	private JoystickButton driverRightButton10;      // Button 10 - Base Right Close
	private JoystickButton driverRightButton11;      // Button 11 - Base RIght Away
	// private JoystickButton driverRightButton12;    // Button 12

	private JoystickAxisButton driverRightX;  // X Axis operation button
	private JoystickAxisButton driverRightY;  // Y Axis operation button

	//============================================================================//
    // Right Driver Stick
	//============================================================================//
	public Joystick driverRight;
	private JoystickButton driverLeftButtonTrigger; // Button 1 - Trigger
	private JoystickButton driverLeftButton2;       // Button 2 - Stick down
	private JoystickButton driverLeftButton3;       // Button 3 - Stick center
	private JoystickButton driverLeftButton4;       // Button 4 - Stick left
	private JoystickButton driverLeftButton5;       // Button 5 - Stick right
	private JoystickButton driverLeftButton6;       // Button 6 - Base Left Away
	private JoystickButton driverLeftButton7;       // Button 7 - Base Left Close
	private JoystickButton driverLeftButton8;       // Button 8 - Base Near Left
	private JoystickButton driverLeftButton9;       // Button 9 - Base Near Right
	private JoystickButton driverLeftButton10;      // Button 10 - Base Right Close
	private JoystickButton driverLeftButton11;      // Button 11 - Base RIght Away
	// private JoystickButton driverLeftButton12;    // Button 12

	private JoystickAxisButton driverLeftX;  // X Axis operation button
	private JoystickAxisButton driverLeftY;  // Y Axis operation button

	//============================================================================//
    // Operator Stick
	//============================================================================//
	public Joystick operatorStick;
	private JoystickButton operatorStickButtonTrigger; // Button 1 - Trigger
	private JoystickButton operatorStickButton2;       // Button 2 - Stick down
	private JoystickButton operatorStickButton3;       // Button 3 - Stick center
	private JoystickButton operatorStickButton4;       // Button 4 - Stick left
	private JoystickButton operatorStickButton5;       // Button 5 - Stick right
	private JoystickButton operatorStickButton6;       // Button 6 - Base Left Away
	private JoystickButton operatorStickButton7;       // Button 7 - Base Left Close
	private JoystickButton operatorStickButton8;       // Button 8 - Base Near Left
	private JoystickButton operatorStickButton9;       // Button 9 - Base Near Right
	private JoystickButton operatorStickButton10;      // Button 10 - Base Right Close
	private JoystickButton operatorStickButton11;      // Button 11 - Base RIght Away
	private JoystickButton operatorStickButton12;      // Button 12

	private JoystickPOVButton operatorStickHatFore;      // Hat Button Forward
	private JoystickPOVButton operatorStickHatForeRight; // Hat Button Forward Right
	private JoystickPOVButton operatorStickHatRight;     // Hat Button Right
	private JoystickPOVButton operatorStickHatAftRight;  // Hat Button Aft Right
	private JoystickPOVButton operatorStickHatAft;       // Hat Button Aft
	private JoystickPOVButton operatorStickHatAftLeft;   // Hat Button Aft Left
	private JoystickPOVButton operatorStickHatLeft;      // Hat Button Left
	private JoystickPOVButton operatorStickHatForeLeft;  // Hat Button Forward Left

	private JoystickAxisButton operatorStickX;  // X Axis operation button
	private JoystickAxisButton operatorStickY;  // Y Axis operation button
	private JoystickAxisButton operatorStickZ;  // X Axis operation button

	//============================================================================//
    // Operator Logitech Controller
	//============================================================================//
	public LogitechController operatorLogitech;
	private JoystickButton operatorLogitechButtonLeft;      // Left Button (Above Trigger)
	private JoystickButton operatorLogitechButtonRight;     // Right Button (Above Trigger)
	private JoystickButton operatorLogitechButtonLeftStick; // Left Stick 
	private JoystickButton operatorLogitechButtonRightStick;// right stick 
	private JoystickButton operatorLogitechButtonA;         // A Button (Green)
	private JoystickButton operatorLogitechButtonB;         // B Button (Red)
	private JoystickButton operatorLogitechButtonX;         // X Button (Blue)
	private JoystickButton operatorLogitechButtonY;         // Y Button (Yellow)
	private JoystickButton operatorLogitechButtonStart;     // Start Button
	private JoystickButton operatorLogitechButtonBack;      // Back Button
	
	private JoystickAxisButton operatorLogitechButtonLeftTrigger;  // Left Trigger (Used as button)
	private JoystickAxisButton operatorLogitechButtonRightTrigger; // Right Trigger (Used as button)
	
	private JoystickPOVButton operatorLogitechButtonGameUp;    // Game Pad Up
	private JoystickPOVButton operatorLogitechButtonGameDown;  // Game Pad Down
	private JoystickPOVButton operatorLogitechButtonGameLeft;  // Game Pad Left
	private JoystickPOVButton operatorLogitechButtonGameRight; // Game Pad Right

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {


		// -----------------------------------------//
		//    INSTANTIATIONS
		// -----------------------------------------//

		driverLeft = new Joystick(LEFT_JOYSTICK_ID);
		driverRight = new Joystick(RIGHT_JOYSTICK_ID);
		operatorStick = new Joystick(OPERATOR_JOYSTICK_ID);
		operatorLogitech = new LogitechController(LOGITECH_CONTROLLER_ID);

		// Instantiate all of the buttons on the 2 joysticks and the logitech controller
		driverLeftButtonTrigger = new JoystickButton(driverLeft, 1);
		driverLeftButton2 = new JoystickButton(driverLeft, 2);
		driverLeftButton3 = new JoystickButton(driverLeft, 3);
		driverLeftButton4 = new JoystickButton(driverLeft, 4);
		driverLeftButton5 = new JoystickButton(driverLeft, 5);
		driverLeftButton6 = new JoystickButton(driverLeft, 6);
		driverLeftButton7 = new JoystickButton(driverLeft, 7);
		driverLeftButton8 = new JoystickButton(driverLeft, 8);
		driverLeftButton9 = new JoystickButton(driverLeft, 9);
		driverLeftButton10 = new JoystickButton(driverLeft, 10);
		driverLeftButton11 = new JoystickButton(driverLeft, 11);
		//        driverLeftButton12 = new JoystickButton(driverLeft, 12);

		driverLeftX = new JoystickAxisButton(driverLeft, 0, JoystickAxisButton.Direction.BOTH, 0.1);  // X Axis operation button
		driverLeftY = new JoystickAxisButton(driverLeft, 1, JoystickAxisButton.Direction.BOTH, 0.1);  // Y Axis operation button

		driverRightButtonTrigger = new JoystickButton(driverRight, 1);
		driverRightButton2 = new JoystickButton(driverRight, 2);
		driverRightButton3 = new JoystickButton(driverRight, 3);
		driverRightButton4 = new JoystickButton(driverRight, 4);
		driverRightButton5 = new JoystickButton(driverRight, 5);
		driverRightButton6 = new JoystickButton(driverRight, 6);
		driverRightButton7 = new JoystickButton(driverRight, 7);
		driverRightButton8 = new JoystickButton(driverRight, 8);
		driverRightButton9 = new JoystickButton(driverRight, 9);
		driverRightButton10 = new JoystickButton(driverRight, 10);
		driverRightButton11 = new JoystickButton(driverRight, 11);
		//        driverRightButton12 = new JoystickButton(driverRight, 12);

		driverRightX = new JoystickAxisButton(driverLeft, 0, JoystickAxisButton.Direction.BOTH, 0.1);  // X Axis operation button
		driverRightY = new JoystickAxisButton(driverLeft, 1, JoystickAxisButton.Direction.BOTH, 0.1);  // Y Axis operation button

		operatorStickButtonTrigger = new JoystickButton(operatorStick, 1);
		operatorStickButton2 = new JoystickButton(operatorStick, 2);
		operatorStickButton3 = new JoystickButton(operatorStick, 3);
		operatorStickButton4 = new JoystickButton(operatorStick, 4);
		operatorStickButton5 = new JoystickButton(operatorStick, 5);
		operatorStickButton6 = new JoystickButton(operatorStick, 6);
		operatorStickButton7 = new JoystickButton(operatorStick, 7);
		operatorStickButton8 = new JoystickButton(operatorStick, 8);
		operatorStickButton9 = new JoystickButton(operatorStick, 9);
		operatorStickButton10 = new JoystickButton(operatorStick, 10);
		operatorStickButton11 = new JoystickButton(operatorStick, 11);
		//        operatorStickButton12 = new JoystickButton(operator, 12);

		operatorStickHatFore = new JoystickPOVButton(operatorStick, 0);
		operatorStickHatForeRight = new JoystickPOVButton(operatorStick, 45);
		operatorStickHatRight = new JoystickPOVButton(operatorStick, 90);
		operatorStickHatAftRight = new JoystickPOVButton(operatorStick, 135);
		operatorStickHatAft = new JoystickPOVButton(operatorStick, 180);
		operatorStickHatAftLeft = new JoystickPOVButton(operatorStick, 225);
		operatorStickHatLeft = new JoystickPOVButton(operatorStick, 270);
		operatorStickHatForeLeft = new JoystickPOVButton(operatorStick, 315);

		operatorStickX = new JoystickAxisButton(driverLeft, 0, JoystickAxisButton.Direction.BOTH, 0.1);  // X Axis operation button
		operatorStickY = new JoystickAxisButton(driverLeft, 1, JoystickAxisButton.Direction.BOTH, 0.1);  // Y Axis operation button
		operatorStickZ = new JoystickAxisButton(driverLeft, 2, JoystickAxisButton.Direction.BOTH, 0.1);  // Y Axis operation button

		operatorLogitechButtonLeft = new JoystickButton(operatorLogitech, LogitechController.ButtonID.LEFT.ID());
		operatorLogitechButtonRight = new JoystickButton(operatorLogitech, LogitechController.ButtonID.RIGHT.ID());
		operatorLogitechButtonLeftStick = new JoystickButton(operatorLogitech, LogitechController.ButtonID.LEFT_STICK.ID());  
		operatorLogitechButtonRightStick =new JoystickButton(operatorLogitech, LogitechController.ButtonID.RIGHT_STICK.ID());  
		operatorLogitechButtonA = new JoystickButton(operatorLogitech, LogitechController.ButtonID.A.ID());
		operatorLogitechButtonB = new JoystickButton(operatorLogitech, LogitechController.ButtonID.B.ID());
		operatorLogitechButtonX = new JoystickButton(operatorLogitech, LogitechController.ButtonID.X.ID());
		operatorLogitechButtonY = new JoystickButton(operatorLogitech, LogitechController.ButtonID.Y.ID());
		operatorLogitechButtonStart = new JoystickButton(operatorLogitech, LogitechController.ButtonID.START.ID());
		operatorLogitechButtonBack = new JoystickButton(operatorLogitech, LogitechController.ButtonID.BACK.ID());

		
		operatorLogitechButtonGameUp = new JoystickPOVButton(operatorLogitech, 0);
		operatorLogitechButtonGameDown = new JoystickPOVButton(operatorLogitech, 180);
		operatorLogitechButtonGameLeft = new JoystickPOVButton(operatorLogitech, 270);
		operatorLogitechButtonGameRight = new JoystickPOVButton(operatorLogitech, 90);
		
		operatorLogitechButtonLeftTrigger = new JoystickAxisButton(operatorLogitech, LogitechController.AxisID.LEFT_TRIGGER.ID(), JoystickAxisButton.Direction.POSITIVE, 0.9);
		operatorLogitechButtonRightTrigger = new JoystickAxisButton(operatorLogitech, LogitechController.AxisID.RIGHT_TRIGGER.ID(), JoystickAxisButton.Direction.POSITIVE, 0.9);


		// -----------------------------------------//
		//    COMMAND ASSIGNMENTS
		// -----------------------------------------//

		// Put print commands on all buttons
		driverLeftButtonTrigger.whileHeld(new GrabBoulderManual());
		//        driverLeftButton2.whenPressed(new AutoDriveTurnToHeading(180));
		//        driverLeftButton3.whenPressed(new AutoDriveTurnToHeading(0));
		//        driverLeftButton4.whenPressed(new AutoDriveTurnToHeading(-90));
		//        driverLeftButton5.whenPressed(new AutoDriveTurnToHeading(90));
		driverLeftButton6.whenPressed(new PrintButton("L Button 6"));
		driverLeftButton7.whenPressed(new PrintButton("L Button 7"));
		driverLeftButton8.whenPressed(new PrintIRRange());
		driverLeftButton9.whenPressed(new PrintButton("L Button 9"));
		driverLeftButton10.whenPressed(new PrintButton("L Button 10"));
		driverLeftButton11.whenPressed(new PrintButton("L Button 11"));
		//        driverLeftButton12.whenPressed(new PrintButton("L Button 12"));

		driverLeftX.whenPressed(new AutoDriveStop());
		driverLeftY.whenPressed(new AutoDriveStop());

		driverRightButtonTrigger.whileHeld(new LaunchBoulder());
		driverRightButton2.whenPressed(new ArmShoulderSetAngle(Position.GAME_START.angle())); 
		driverRightButton3.whenPressed(new ArmShoulderSetAngle(Position.LOW_BAR_TRAVEL.angle()));
		driverRightButton4.whenPressed(new ArmShoulderSetAngle(Position.PREPARE_FOR_BOULDER.angle()));
		driverRightButton5.whenPressed(new ArmShoulderSetAngle(Position.GRAB_BOULDER.angle()));
		driverRightButton6.whenPressed(new PrintButton("R Button 6"));
		driverRightButton7.whenPressed(new PrintButton("R Button 7"));
		//        driverRightButton8.whenPressed(new ArmExtendRetract(true)); // Actually Retracts
		//        driverRightButton9.whenPressed(new ArmExtendRetract(false)); // Actually Extends
		driverRightButton8.whileHeld(new ArmExtendRetract(true)); // Actually Retracts
		driverRightButton9.whileHeld(new ArmExtendRetract(false)); // Actually Extends
        driverRightButton10.whenPressed(new ArmChainBurp(false));  //burp out
        driverRightButton11.whenPressed(new ArmChainBurp(true));  //burp in
		//        driverRightButton12.whenPressed(new PrintButton("R Button 12"));

		driverRightX.whenPressed(new AutoDriveStop());
		driverRightY.whenPressed(new AutoDriveStop());

		operatorStickButtonTrigger.whileHeld(new GrabBoulderManual());     // Trigger
		operatorStickButton2.whenPressed(new LaunchBoulder());             // Thumb Button
		operatorStickButton3.whenPressed(new ArmShoulderSetAngle(Position.PREPARE_FOR_BOULDER.angle())); // Button 3
		operatorStickButton4.whenPressed(new ArmShoulderSetAngle(Position.LOW_BAR_TRAVEL.angle()));      // Button 4
		operatorStickButton5.whenPressed(new ArmShoulderSetAngle(Position.TOWER_SCALE.angle()));         // Button 5
		operatorStickButton6.whenPressed(new ArmShoulderSetAngle(Position.FRENCH_FRIES_DOWN.angle()));   // Button 6
		//        operatorStickButton7.whileHeld(new PrintIMUOutput("IMU"));
		operatorStickButton8.whenPressed(new PrintButton("O Button 8"));
		//        operatorStickButton9.whenPressed(new AutoDriveSpeedForTime(0.5, 0.5, 1.0));
		//        operatorStickButton9.whenPressed(new AutoDriveMoveDistance(0.5, 0.5, 60));
		//        operatorStickButton9.whileHeld(new PrintIMUOutput("IMU"));
		//        operatorStickButton10.whileHeld(new PrintIRRange());
		operatorStickButton11.whileHeld(new ArmManualMove());
		//        operatorStickButton12.whenPressed(new TurnToHeading(-90));

		operatorStickHatFore.whileHeld(new ArmShoulderManual(ArmShoulderManual.Direction.UP));
		operatorStickHatForeRight.whenPressed(new PrintButton("O  Hat Fore Right"));
		operatorStickHatRight.whenPressed(new PrintButton("O  Hat Right"));
		operatorStickHatAftRight.whenPressed(new PrintButton("O  Hat Aft Right"));
		operatorStickHatAft.whileHeld(new ArmShoulderManual(ArmShoulderManual.Direction.DOWN));
		operatorStickHatAftLeft.whenPressed(new PrintButton("O  Hat Aft Left"));
		operatorStickHatLeft.whenPressed(new PrintButton("O  Hat Left"));
		operatorStickHatForeLeft.whenPressed(new PrintButton("O  Hat Fore Left"));

//		operatorStickX.whenPressed(new AutoDriveStop());
//		operatorStickY.whenPressed(new AutoDriveStop());
//		operatorStickZ.whenPressed(new AutoDriveStop());

		operatorLogitechButtonLeft.whenPressed(new ArmShoulderSetAngle(Position.PREPARE_FOR_BOULDER.angle()));
		operatorLogitechButtonRight.whenPressed(new ArmShoulderSetAngle(Position.GAME_START.angle())); 
		operatorLogitechButtonLeftStick.whileHeld(new ArmManualMove());
		operatorLogitechButtonRightStick.whenPressed(new PrintButton("P Button RightStick"));
		//  operatorLogitechButtonLeftStick.whenHeld(new ArmShoulderManual(ArmShoulderManual.Direction.UP));

		operatorLogitechButtonA.whenPressed(new ArmShoulderSetAngle(Position.FRENCH_FRIES_DOWN.angle()));
		operatorLogitechButtonB.whenPressed(new ArmShoulderSetAngle(Position.LOW_BAR_TRAVEL.angle()));  
		operatorLogitechButtonX.whenPressed(new PrintButton("P Button X"));
		operatorLogitechButtonY.whenPressed(new ArmShoulderSetAngle(Position.TOWER_SCALE.angle()));
		operatorLogitechButtonStart.whenPressed(new PrintButton("P Button Start"));
		operatorLogitechButtonBack.whenPressed(new PrintButton("P Button Back"));
		operatorLogitechButtonLeftTrigger.whenPressed(new ArmShoulderSetAngle(Position.GRAB_BOULDER.angle()));
		operatorLogitechButtonRightTrigger.whenPressed(new LaunchBoulder()); 
		//            operatorLogitechButtonGameUp.whenPressed(new ArmExtendRetract(false)); // Actually Extends
		//            operatorLogitechButtonGameDown.whenPressed(new ArmExtendRetract(true)); // Actually Retracts
		operatorLogitechButtonGameLeft.whenPressed(new ArmShoulderManual(ArmShoulderManual.Direction.DOWN));
		operatorLogitechButtonGameRight.whenPressed(new ArmShoulderManual(ArmShoulderManual.Direction.UP));

		SmartDashboard.putData("PrintButton", new PrintButton("SmartDashboard - PrintButton"));
		SmartDashboard.putData("TeleopDrive", new TeleopDrive());
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getArcadeStick() {
		return operatorStick;
	}

	public LogitechController getGamepadControls() {
		return operatorLogitech;
	}

	public Joystick getLeftTankStick() {
		return driverLeft;
	}

	public Joystick getRightTankStick() {
		return driverRight;
	}

	public int getOperatorPOV()
	{
		int povSetting = 0;
		if(operatorLogitech != null)
		{
			povSetting += operatorLogitech.getPOV();
		}
		if(operatorStick != null)
		{
			povSetting += operatorStick.getPOV(0);
		}

		return povSetting;
	}

	public double getOperatorThrottle()
	{
		double throttle = 0;

		if(operatorLogitech != null)
		{
			throttle += operatorLogitech.getLeftY();
		}
		if(operatorStick != null)
		{
			throttle += operatorStick.getThrottle();
		}
		return throttle;
	}
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

